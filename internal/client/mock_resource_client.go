// Code generated by mockery. DO NOT EDIT.

package client

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
)

// MockResourceClient is an autogenerated mock type for the ResourceClient type
type MockResourceClient struct {
	mock.Mock
}

type MockResourceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockResourceClient) EXPECT() *MockResourceClient_Expecter {
	return &MockResourceClient_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, namespace, name
func (_m *MockResourceClient) Delete(ctx context.Context, namespace string, name string) error {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockResourceClient_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockResourceClient_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - name string
func (_e *MockResourceClient_Expecter) Delete(ctx interface{}, namespace interface{}, name interface{}) *MockResourceClient_Delete_Call {
	return &MockResourceClient_Delete_Call{Call: _e.mock.On("Delete", ctx, namespace, name)}
}

func (_c *MockResourceClient_Delete_Call) Run(run func(ctx context.Context, namespace string, name string)) *MockResourceClient_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockResourceClient_Delete_Call) Return(_a0 error) *MockResourceClient_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockResourceClient_Delete_Call) RunAndReturn(run func(context.Context, string, string) error) *MockResourceClient_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetResourceKind provides a mock function with no fields
func (_m *MockResourceClient) GetResourceKind() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetResourceKind")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockResourceClient_GetResourceKind_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResourceKind'
type MockResourceClient_GetResourceKind_Call struct {
	*mock.Call
}

// GetResourceKind is a helper method to define mock.On call
func (_e *MockResourceClient_Expecter) GetResourceKind() *MockResourceClient_GetResourceKind_Call {
	return &MockResourceClient_GetResourceKind_Call{Call: _e.mock.On("GetResourceKind")}
}

func (_c *MockResourceClient_GetResourceKind_Call) Run(run func()) *MockResourceClient_GetResourceKind_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResourceClient_GetResourceKind_Call) Return(_a0 string) *MockResourceClient_GetResourceKind_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockResourceClient_GetResourceKind_Call) RunAndReturn(run func() string) *MockResourceClient_GetResourceKind_Call {
	_c.Call.Return(run)
	return _c
}

// GetResourceName provides a mock function with no fields
func (_m *MockResourceClient) GetResourceName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetResourceName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockResourceClient_GetResourceName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResourceName'
type MockResourceClient_GetResourceName_Call struct {
	*mock.Call
}

// GetResourceName is a helper method to define mock.On call
func (_e *MockResourceClient_Expecter) GetResourceName() *MockResourceClient_GetResourceName_Call {
	return &MockResourceClient_GetResourceName_Call{Call: _e.mock.On("GetResourceName")}
}

func (_c *MockResourceClient_GetResourceName_Call) Run(run func()) *MockResourceClient_GetResourceName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResourceClient_GetResourceName_Call) Return(_a0 string) *MockResourceClient_GetResourceName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockResourceClient_GetResourceName_Call) RunAndReturn(run func() string) *MockResourceClient_GetResourceName_Call {
	_c.Call.Return(run)
	return _c
}

// IncErrorMetric provides a mock function with no fields
func (_m *MockResourceClient) IncErrorMetric() {
	_m.Called()
}

// MockResourceClient_IncErrorMetric_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncErrorMetric'
type MockResourceClient_IncErrorMetric_Call struct {
	*mock.Call
}

// IncErrorMetric is a helper method to define mock.On call
func (_e *MockResourceClient_Expecter) IncErrorMetric() *MockResourceClient_IncErrorMetric_Call {
	return &MockResourceClient_IncErrorMetric_Call{Call: _e.mock.On("IncErrorMetric")}
}

func (_c *MockResourceClient_IncErrorMetric_Call) Run(run func()) *MockResourceClient_IncErrorMetric_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResourceClient_IncErrorMetric_Call) Return() *MockResourceClient_IncErrorMetric_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockResourceClient_IncErrorMetric_Call) RunAndReturn(run func()) *MockResourceClient_IncErrorMetric_Call {
	_c.Run(run)
	return _c
}

// IncKilledMetric provides a mock function with no fields
func (_m *MockResourceClient) IncKilledMetric() {
	_m.Called()
}

// MockResourceClient_IncKilledMetric_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncKilledMetric'
type MockResourceClient_IncKilledMetric_Call struct {
	*mock.Call
}

// IncKilledMetric is a helper method to define mock.On call
func (_e *MockResourceClient_Expecter) IncKilledMetric() *MockResourceClient_IncKilledMetric_Call {
	return &MockResourceClient_IncKilledMetric_Call{Call: _e.mock.On("IncKilledMetric")}
}

func (_c *MockResourceClient_IncKilledMetric_Call) Run(run func()) *MockResourceClient_IncKilledMetric_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResourceClient_IncKilledMetric_Call) Return() *MockResourceClient_IncKilledMetric_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockResourceClient_IncKilledMetric_Call) RunAndReturn(run func()) *MockResourceClient_IncKilledMetric_Call {
	_c.Run(run)
	return _c
}

// List provides a mock function with given fields: ctx, namespace
func (_m *MockResourceClient) List(ctx context.Context, namespace string) ([]*unstructured.Unstructured, error) {
	ret := _m.Called(ctx, namespace)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*unstructured.Unstructured
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*unstructured.Unstructured, error)); ok {
		return rf(ctx, namespace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*unstructured.Unstructured); ok {
		r0 = rf(ctx, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*unstructured.Unstructured)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockResourceClient_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockResourceClient_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
func (_e *MockResourceClient_Expecter) List(ctx interface{}, namespace interface{}) *MockResourceClient_List_Call {
	return &MockResourceClient_List_Call{Call: _e.mock.On("List", ctx, namespace)}
}

func (_c *MockResourceClient_List_Call) Run(run func(ctx context.Context, namespace string)) *MockResourceClient_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockResourceClient_List_Call) Return(_a0 []*unstructured.Unstructured, _a1 error) *MockResourceClient_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockResourceClient_List_Call) RunAndReturn(run func(context.Context, string) ([]*unstructured.Unstructured, error)) *MockResourceClient_List_Call {
	_c.Call.Return(run)
	return _c
}

// ShouldProcess provides a mock function with no fields
func (_m *MockResourceClient) ShouldProcess() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ShouldProcess")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockResourceClient_ShouldProcess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShouldProcess'
type MockResourceClient_ShouldProcess_Call struct {
	*mock.Call
}

// ShouldProcess is a helper method to define mock.On call
func (_e *MockResourceClient_Expecter) ShouldProcess() *MockResourceClient_ShouldProcess_Call {
	return &MockResourceClient_ShouldProcess_Call{Call: _e.mock.On("ShouldProcess")}
}

func (_c *MockResourceClient_ShouldProcess_Call) Run(run func()) *MockResourceClient_ShouldProcess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResourceClient_ShouldProcess_Call) Return(_a0 bool) *MockResourceClient_ShouldProcess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockResourceClient_ShouldProcess_Call) RunAndReturn(run func() bool) *MockResourceClient_ShouldProcess_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockResourceClient creates a new instance of MockResourceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockResourceClient(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockResourceClient {
	mock := &MockResourceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
